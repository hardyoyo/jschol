---
name: jschol
# CAREFUL with this env file, Docker env files don't support interpolation!
env_file:
  - defaults.env
  - local.env
services:
  appserver:
    type: ruby:2.6.8
    ports:
      - '18880:18880'
    overrides:
      # Pass SSH auth.
      volumes:
        - type: bind
          # Linux user: add 'export LANDO_SSH_AUTH_SOCK="${SSH_AUTH_SOCK}' at the end of your ~/.bashrc:
          # Mac user: MacOS specific path is here as the variable default value, nothing to do.
          source: "${LANDO_SSH_AUTH_SOCK:-/run/host-services/ssh-auth.sock}"
          target: /run/host-services/ssh-auth.sock
      environment:
        SSH_AUTH_SOCK: "/run/host-services/ssh-auth.sock"
        GEM_HOME: "/usr/local/bundle"
        PATH: "/usr/local/bundle/bin:/usr/local/bundle/gems/bin:${PATH}"
      ports:
        - '18880:18880'
    command:
      - /app/node_modules/.bin/gulp
    build_as_root:
      - apt-get update -qq
      - apt-get install -y apt-transport-https
      - apt-get install -y vim net-tools
      # setup the Node 10 PPA from nodesource
      - curl -sL https://deb.nodesource.com/setup_10.x | bash -
      # setup Yarn PPA
      - curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -
      - echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list
      # pin Nodejs to version 10 so we don't accidentally upgrade to a newer version until we want to
      - echo Package\:\ nodejs\\nPin\:\ version\ 10*\\nPin-Priority\:\ 1001 >> /etc/apt/preferences
      - apt-get update -qq
      - apt-get autoclean
      # Specify the exact version of Nodejs to install, to avoid surprises
      - apt-get install mariadb-client build-essential libpq-dev yarn nodejs=10.24.1-deb-1nodesource1 -y
      - gem install bundler
      - apt-get autoclean
      # SSH agent hack to ensure the SSH agent on the host is accessible in this container
      - chown www-data:www-data /run/host-services/ssh-auth.sock
      - chmod g+w /run/host-services/ssh-auth.sock
      # the symlink for gulp is nice to have
      - if [ ! -L /app/gulp ]; then ln -s /app/node_modules/.bin/gulp /app/gulp; fi

    build:
      - cd /app && /app/setup.sh
      - cd /app && bundle
    run:
    run_as_root:
      # more of the SSH agent hack to ensure the SSH agent on the host is accessible in this container
      - chown www-data:www-data /run/host-services/ssh-auth.sock
      - chmod g+w /run/host-services/ssh-auth.sock

    moreHttpPorts:
      - '18880'
    scanner: true

# uncomment this or use your .lando.local.yml file to run a local db if you need it
  # db:
  #   type: mysql
  #   portforward: true
  #   creds:
  #     user: escholdba
  #     password: hard2guess
  #     database: local_eschol_prod

events:
  pre-destroy:
    - appserver: rm -Rf /app/gems/*
  post-start:
    - appserver: test -e ~/.ssh/config || printf 'Host *\n  AddKeysToAgent yes\n' > ~/.ssh/config

tooling:
  # uncomment this if you want to use a local database (see above)
  # mysql:
  #   service: db
  #   cmd: mysql -u root
  # 'db-import <file>':
  #   service: :host
  #   description: Imports a dump file into a database service
  #   cmd: /helpers/sql-import.sh
  #   options:
  #     host:
  #       description: The database service to use
  #       default: db
  #       alias:
  #         - h
  #     no-wipe:
  #       description: Do not destroy the existing database before an import
  #       boolean: true
  npm:
    service: appserver
    description: Runs npm commands on the Lando Jschol appserver
    dir: /app
  nvm:
    service: appserver
    description: Runs nvm commands on the Lando Jschol appserver
    dir: /app
    user: root
  yarn:
    service: appserver
    description: Runs yarn commands on the Lando Jschol appserver
  ruby:
    service: appserver
    description: Runs ruby commands on the Lando Jschol appserver
    dir: /app
  bundle:
    service: appserver
    description: Runs bundle commands on the Lando Jschol appserver
    dir: /app
  test:
    service: appserver
    SCHEME: http
    cmd: bundle exec rubocop && npx eslint . && ruby tools/maybeSocks.rb && ruby test/quick.rb
    description: Runs the quicktest suite on the Lando Jschol appserver
  test-prd:
    service: appserver
    cmd: ruby test/quick.rb
    env:
      PUMA_PORT: 443
      SCHEME: https
      TARGET_HOST: escholarship.org
    description: Runs the quicktest suite against production Jschol
  #NOTE: tooling for testing stg and dev does not belong in this file, which is publicly available, please add it to your .lando.local.yml file instead
  socks:
    service: appserver
    cmd:
      - ruby tools/maybeSocks.rb && echo "==> running netstat -tunl to confirm SOCKS_PORT is open <==" && netstat -tunl | grep ${SOCKS_PORT}
    description: Sets the socks proxy tunnel back up, if you have been too idle
  ssh-fix:
    service: appserver
    description: Fix ssh auth sock permission for MacOS users. Lando rebuild fixes the problem as well.
    user: root

